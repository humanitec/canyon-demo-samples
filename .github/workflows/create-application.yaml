name: New Application
on:
  workflow_dispatch:
    inputs:
      name:
        description: The app name
        required: true
        type: string
      org_id:
        description: The org to create the app in
        required: true
        type: string
      owner:
        description: The owner id
        required: true
        type: string
      run-id:
        description: The run id passed in from the Humanitec Pipeline
        required: false
        default: unknown
        type: string

jobs:
  main:
    env:
      HUMANITEC_TOKEN: ${{ secrets.HUMANITEC_TOKEN }}
      HUMANITEC_ORG: ${{ inputs.org_id }}
    runs-on: ubuntu-latest
    steps:
      - uses: humanitec/setup-cli-action@v1
        with:
          version: '0.32.0'
      - run: 'humctl create app "${{ inputs.name }}"'
      - run: |
          humctl api post "/orgs/${{ env.HUMANITEC_ORG }}/apps/${{ inputs.name }}/users" -d '{"id": "${{ inputs.owner }}", "role": "owner"}'
      - run: 'humctl create env staging --type staging --app "${{ inputs.name }}"'
      - run: 'humctl create env production --type production --app "${{ inputs.name }}"'
      - run: |
          humctl api post /orgs/${{ env.HUMANITEC_ORG }}/resources/defs/my-cluster/criteria -d '{"app_id": "${{ inputs.name }}"}'
      - run: |
          humctl api post /orgs/${{ env.HUMANITEC_ORG }}/resources/defs/agent-my-cluster/criteria -d '{"app_id": "${{ inputs.name }}"}'
      - run: |
          humctl api post /orgs/${{ env.HUMANITEC_ORG }}/resources/defs/my-vd-tf-fake-s3/criteria -d '{"app_id": "${{ inputs.name }}"}'
      - run: |
          cat > score.yaml <<"EOF"
          # Score Specification version
          apiVersion: score.dev/v1b1

          # Defines metadata description of your Workload
          metadata:
            # Specifies a string that can describe your Workload
            name: ${{ inputs.name }}-app
            annotations:
              Github-Repo: https://github.com/astromechza/demo-app
              Version: v0.6.7

          # Defines how an application can expose its resources when executed.
          service:
            ports:
              # Specifies the port name
              www:
                # The port to expose to an external application
                port: 8080

          # Defines how the Workloadâ€™s tasks are executed
          containers:
            # Specifies a name of the container image
            main:
              # Docker image name and tag
              image: ghcr.io/astromechza/demo-app:v0.6.7
              # Specifies environment variable
              variables:
                PORT: "3000"
                MESSAGE: "Hello, World!"

          # Defines dependencies needed by the Workload
          resources:
            # Specifies the resource name
            route:
              # Specifies the resource type
              type: route
              # Specifies the resource parameters
              params:
                host: ${resources.dns.host}
                path: /
                port: 8080
            dns:
              type: dns
          EOF
      - run: humctl score deploy --app "${{ inputs.name }}" --env "development" --wait
  catch:
    needs:
      - main
    if: ${{ failure() }}
    env:
      HUMANITEC_TOKEN: ${{ secrets.HUMANITEC_TOKEN }}
      HUMANITEC_ORG: ${{ inputs.org_id }}
    runs-on: ubuntu-latest
    steps:
      - uses: humanitec/setup-cli-action@v1
        with:
          version: '0.32.0'
      - run: 'humctl delete app "${{ inputs.name }}"'
